{"version":3,"file":"config.service.js","sourceRoot":"","sources":["../../home/aaltamir/work/angular2/angular2-dashboard/tmp/broccoli_type_script_compiler-input_base_path-PkK8zDWh.tmp/0/src/app/services/config.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAAmB,eAAe,CAAC,CAAA;AACnC,mBAAyB,SAAS,CAAC,CAAA;AACnC,QAAO,uBAAuB,CAAC,CAAA;AAG/B;IAME,uBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAC9B,CAAC;IAED,4BAAI,GAAJ;QAAA,iBAmBC;QAlBC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,4BAA4B,CAAC;iBACxC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,UAAC,QAAQ;gBAClB,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACrB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,GAAG,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC;qBACzD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;qBACtB,KAAK,CAAC,UAAC,KAAU;oBAChB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAChE,CAAC,CAAC;qBACD,SAAS,CAAC,UAAC,IAAI;oBACd,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8BAAM,GAAN,UAAO,GAAQ;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,2BAAG,GAAH,UAAI,GAAQ;QACV,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,iCAAS,GAAT,UAAU,GAAQ,EAAE,GAAQ;QAC1B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,CAAC;IAED,iCAAS,GAAT,UAAU,GAAQ;QAChB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IA7CH;QAAC,iBAAU,EAAE;;qBAAA;IA+Cb,oBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,qBAAa,gBA8CzB,CAAA;AAAA,CAAC","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http} from \"@angular/http\";\nimport {Observable} from \"rxjs/Rx\";\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class ConfigService {\n\n  private _config: Object;\n  private _env: Object;\n  private _configCustom: Object;\n\n  constructor(private http: Http) {\n  }\n\n  load() {\n    return new Promise((resolve, reject) => {\n      this.http.get('app/shared/config/env.json')\n        .map(res => res.json())\n        .subscribe((env_data) => {\n          this._env = env_data;\n          this.http.get('app/shared/config/' + env_data.env + '.json')\n            .map(res => res.json())\n            .catch((error: any) => {\n              console.error(error);\n              return Observable.throw(error.json().error || 'Server error');\n            })\n            .subscribe((data) => {\n              this._config = data;\n              resolve(true);\n            });\n        });\n\n    });\n  }\n\n  getEnv(key: any) {\n    return this._env[key];\n  }\n\n  get(key: any) {\n    return this._config[key];\n  }\n\n  setCustom(key: any, val: any) {\n    this._configCustom[key] = val;\n  }\n\n  getCustom(key: any) {\n    return this._configCustom[key];\n  }\n\n};\n\n"]}