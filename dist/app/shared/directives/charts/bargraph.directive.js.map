{"version":3,"file":"bargraph.directive.js","sourceRoot":"","sources":["../../../../home/aaltamir/work/angular2/angular2-dashboard/tmp/broccoli_type_script_compiler-input_base_path-PkK8zDWh.tmp/0/src/app/shared/directives/charts/bargraph.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAmD,eAAe,CAAC,CAAA;AAQnE;IAKE,2BAAY,OAAkB;QAC5B,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,CAAC;IAED,2CAAe,GAAf;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;QACrB,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,KAAK,GAAG;YACV,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC;YAC1C,QAAQ,EAAE,CAAC;oBACT,KAAK,EAAE,MAAM;oBACb,eAAe,EAAE,SAAS;oBAC1B,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;iBACxB,CAAC;SACH,CAAC;QAEF,IAAI,QAAQ,GAAG;YACb,8EAA8E;YAC9E,0FAA0F;YAC1F,QAAQ,EAAE;gBACR,SAAS,EAAE;oBACT,WAAW,EAAE,CAAC;oBACxB,0CAA0C;oBAChC,aAAa,EAAE,MAAM;iBACtB;aACF;YACD,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE;gBACN,QAAQ,EAAE,OAAO;aAClB;YACD,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,uBAAuB;aAC9B;SACF,CAAC;QAEF,IAAI,MAAM,GAAG;YACX,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,KAAK;YACX,OAAO,EAAE,QAAQ;SAClB,CAAA;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAC,GAAG,EAAG,MAAM,CAAC,CAAC;QAEvC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAxDH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,YAAY;SACvB,CAAC;;yBAAA;IAuDF,wBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,yBAAiB,oBAqD7B,CAAA","sourcesContent":["import {Directive, ElementRef, AfterViewInit} from '@angular/core';\n\ndeclare var Chart:any;\n\n@Directive({\n  selector: '[bargraph]'\n})\n\nexport class BarGraphDirective implements AfterViewInit{\n\n  el:any;\n  myChart:any;\n\n  constructor(element:ElementRef) {\n    this.el = element.nativeElement;\n  }\n\n  ngAfterViewInit() {\n    var canvas = this.el;\n    var ctx = canvas.getContext('2d');\n\n    var _data = {\n      labels: [\"Sent\", \"Received\", \"WEB\", \"FTP\"],\n      datasets: [{\n        label: \"data\",\n        backgroundColor: \"#36A2EB\",\n        data: [70, 50, 45, 100]\n      }]\n    };\n\n    var _options = {\n      // Elements options apply to all of the options unless overridden in a dataset\n      // In this case, we are setting the border of each horizontal bar to be 2px wide and green\n      elements: {\n        rectangle: {\n          borderWidth: 2,\n//          borderColor: 'rgb(0, 255, 0)',\n          borderSkipped: 'left'\n        }\n      },\n      responsive: true,\n      legend: {\n        position: 'right',\n      },\n      title: {\n        display: true,\n        text: 'Document Transmission'\n      }\n    };\n\n    var config = {\n      type: 'horizontalBar',\n      data: _data,\n      options: _options\n    }\n\n    this.myChart = new Chart(ctx,  config);\n\n    console.log(ctx);\n    console.log(this.myChart);\n  }\n}\n"]}